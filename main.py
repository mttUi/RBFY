import telebot
from telebot import types
import pandas as pd

bot = telebot.TeleBot("7221264332:AAGeFT7XSjgEkOtgGhJJ2wXKEG-0FSNF4ow")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ Excel —Ñ–∞–π–ª–∞
def get_schedule(sheet_name, day):
    try:
        # –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª
        df = pd.read_excel('schedule.xlsx', sheet_name=sheet_name, engine='openpyxl', index_col=0)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
        schedule_text = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {day}:\n\n"
        for index, row in df.iterrows():
            schedule_text += f"{index}: {row[day]}\n"
        return schedule_text
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è {sheet_name} –∏ {day}: {e}"


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
user_data = {}


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üåê–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    btn2 = types.KeyboardButton("üë§–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    markup.add(btn1, btn2)

    pbtn = types.InlineKeyboardMarkup()
    pbtn1 = types.InlineKeyboardButton(text='–†–ë–î/1–≥—Ä/1–ø–≥', callback_data='–†–ë–î 1–≥—Ä 1–ø–≥')
    pbtn2 = types.InlineKeyboardButton(text='–†–ë–î/1–≥—Ä/2–ø–≥', callback_data='–†–ë–î 1–≥—Ä 2–ø–≥')
    pbtn3 = types.InlineKeyboardButton(text='–†–ë–î/2–≥—Ä/1–ø–≥', callback_data='–†–ë–î 2–≥—Ä 1–ø–≥')
    pbtn4 = types.InlineKeyboardButton(text='–†–ë–î/2–≥—Ä/2–ø–≥', callback_data='–†–ë–î 2–≥—Ä 2–ø–≥')
    pbtn5 = types.InlineKeyboardButton(text='–†–ò–°–ö–£/1–≥—Ä/1–ø–≥', callback_data='–†–ò–°–ö–£ 1–≥—Ä 1–ø–≥')
    pbtn6 = types.InlineKeyboardButton(text='–†–ò–°–ö–£/1–≥—Ä/2–ø–≥', callback_data='–†–ò–°–ö–£ 1–≥—Ä 2–ø–≥')
    pbtn.add(pbtn1, pbtn2, pbtn3, pbtn4, pbtn5, pbtn6)

    sent_message = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É –æ–±—É—á–µ–Ω–∏—è", reply_markup=pbtn,
                                    parse_mode='html')

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_data[message.chat.id] = {'last_bot_message_ids': [sent_message.message_id]}

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    if ' ' in call.data:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        user_data[call.message.chat.id]['group'] = call.data
        send_day_selection(call.message)
    elif call.data == 'back':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è –Ω–µ–¥–µ–ª–∏
        send_day_selection(call.message)
    elif call.data == 'select_group':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø—ã
        start(call.message)
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        try:
            group = user_data[call.message.chat.id].get('group')
            if group:
                schedule_text = get_schedule(group, call.data)
                schedule_text += "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                schedule_markup = types.InlineKeyboardMarkup()
                back_button = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='back')
                select_group_button = types.InlineKeyboardButton(text="–ö –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø—ã", callback_data='select_group')
                schedule_markup.add(back_button, select_group_button)
                sent_message = bot.send_message(call.message.chat.id, schedule_text, reply_markup=schedule_markup)

                # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
                delete_previous_messages(call.message.chat.id)
                user_data[call.message.chat.id]['last_bot_message_ids'] = [sent_message.message_id]

            else:
                sent_message = bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É.")
                delete_previous_messages(call.message.chat.id)
                user_data[call.message.chat.id]['last_bot_message_ids'] = [sent_message.message_id]

        except Exception as e:
            sent_message = bot.send_message(call.message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            delete_previous_messages(call.message.chat.id)
            user_data[call.message.chat.id]['last_bot_message_ids'] = [sent_message.message_id]


@bot.message_handler(content_types=['text'])
def otvet(message):
    if message.text == "üë§–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        sent_message = bot.send_message(message.chat.id, "–°–æ–∑–¥–∞—Ç–µ–ª–∏ —Ç—É—Ç—É—Ç—Ç—É—Ç—É—Ç")

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–æ—Ç–∞
        delete_previous_messages(message.chat.id)
        user_data[message.chat.id] = {'last_bot_message_ids': [sent_message.message_id]}

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)


def send_day_selection(message):
    days_markup = types.InlineKeyboardMarkup()
    days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞']
    for day in days:
        days_markup.add(types.InlineKeyboardButton(text=day, callback_data=day))
    sent_message = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=days_markup)

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
    delete_previous_messages(message.chat.id)
    user_data[message.chat.id]['last_bot_message_ids'] = [sent_message.message_id]


def delete_previous_messages(chat_id):
    if chat_id in user_data:
        for message_id in user_data[chat_id].get('last_bot_message_ids', []):
            try:
                bot.delete_message(chat_id, message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –≤ —á–∞—Ç–µ {chat_id}: {e}")


bot.polling(none_stop=True)
